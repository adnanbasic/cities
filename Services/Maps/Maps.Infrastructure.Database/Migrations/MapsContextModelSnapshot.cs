// <auto-generated />
using Maps.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Maps.Infrastructure.Database.Migrations
{
    [DbContext(typeof(MapsContext))]
    partial class MapsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Maps.Core.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Deleted = false,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 2L,
                            Deleted = false,
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = 3L,
                            Deleted = false,
                            Name = "Ljubljana"
                        },
                        new
                        {
                            Id = 4L,
                            Deleted = false,
                            Name = "Belgrade"
                        },
                        new
                        {
                            Id = 5L,
                            Deleted = false,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = 6L,
                            Deleted = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 7L,
                            Deleted = false,
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 8L,
                            Deleted = false,
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 9L,
                            Deleted = false,
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 10L,
                            Deleted = false,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 11L,
                            Deleted = false,
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 12L,
                            Deleted = false,
                            Name = "Stockholm"
                        });
                });

            modelBuilder.Entity("Maps.Core.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Maps.Core.Domain.Entities.Location", b =>
                {
                    b.HasOne("Maps.Core.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
